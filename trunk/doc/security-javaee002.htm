<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.16 Build 1" />
<meta name="date" content="2013-06-27T16:6:15Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Securing Enterprise Beans" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Securing Enterprise Beans | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: June, 2013</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part IV Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">21</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">22</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">23</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">24</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">25</span> JAX-RS: Advanced Topics and Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part V Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">26</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">27</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">28</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">29</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">30</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part VI Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">31</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">32</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">33</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">34</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">35</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">36</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">37</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">38</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">39</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">40</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">41</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part VIII Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">42</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">43</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part IX Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">44</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">45</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">46</span> Getting Started Securing Enterprise Applications</a></h2>
<ul style="list-style-type:none">
<li><a href="security-javaee001.htm#CACGIFHJ"><span class="secnum">46.1</span> Basic Security Tasks for Enterprise Applications</a></li>
<li><div id="backgroundColor"><a href="security-javaee002.htm#BNBYL"><span class="secnum">46.2</span> Securing Enterprise Beans</a><ul style="list-style-type:none">
<li><a href="security-javaee002.htm#GJGDI"><span class="secnum">46.2.1</span> Securing an Enterprise Bean Using Declarative Security</a>
<ul style="list-style-type:none">
<li><a href="security-javaee002.htm#GJGCQ"><span class="secnum">46.2.1.1</span> Specifying Authorized Users by Declaring Security Roles</a></li>
<li><a href="security-javaee002.htm#BNBYU"><span class="secnum">46.2.1.2</span> Specifying an Authentication Mechanism and Secure Connection</a></li>
</ul>
</li>
<li><a href="security-javaee002.htm#GJGCS"><span class="secnum">46.2.2</span> Securing an Enterprise Bean Programmatically</a>
<ul style="list-style-type:none">
<li><a href="security-javaee002.htm#GJGCR"><span class="secnum">46.2.2.1</span> Accessing an Enterprise Bean Caller's Security Context</a></li>
</ul>
</li>
<li><a href="security-javaee002.htm#BNBYR"><span class="secnum">46.2.3</span> Propagating a Security Identity (Run-As)</a>
<ul style="list-style-type:none">
<li><a href="security-javaee002.htm#BNBZB"><span class="secnum">46.2.3.1</span> Configuring a Component's Propagated Security Identity</a></li>
<li><a href="security-javaee002.htm#BNBZC"><span class="secnum">46.2.3.2</span> Trust between Containers</a></li>
</ul>
</li>
<li><a href="security-javaee002.htm#BNBZG"><span class="secnum">46.2.4</span> Deploying Secure Enterprise Beans</a></li>
</ul>
</div></li>
<li><a href="security-javaee003.htm#GKBSZ"><span class="secnum">46.3</span> Examples: Securing Enterprise Beans</a>
<ul style="list-style-type:none">
<li><a href="security-javaee003.htm#BNBZK"><span class="secnum">46.3.1</span> The cart-secure Example: Securing an Enterprise Bean with Declarative Security</a>
<ul style="list-style-type:none">
<li><a href="security-javaee003.htm#BNBZL"><span class="secnum">46.3.1.1</span> Annotating the Bean</a></li>
<li><a href="security-javaee003.htm#BNBZN"><span class="secnum">46.3.1.2</span> To Run the cart-secure Example Using NetBeans IDE</a></li>
<li><a href="security-javaee003.htm#BNBZO"><span class="secnum">46.3.1.3</span> To Run the cart-secure Example Using Maven</a></li>
</ul>
</li>
<li><a href="security-javaee003.htm#BNCAA"><span class="secnum">46.3.2</span> The converter-secure Example: Securing an Enterprise Bean with Programmatic Security</a>
<ul style="list-style-type:none">
<li><a href="security-javaee003.htm#BNCAB"><span class="secnum">46.3.2.1</span> Modifying ConverterBean</a></li>
<li><a href="security-javaee003.htm#GKBSI"><span class="secnum">46.3.2.2</span> Modifying ConverterServlet</a></li>
<li><a href="security-javaee003.htm#BNCAD"><span class="secnum">46.3.2.3</span> To Run the converter-secure Example Using NetBeans IDE</a></li>
<li><a href="security-javaee003.htm#BNCAE"><span class="secnum">46.3.2.4</span> To Run the converter-secure Example Using Maven</a></li>
<li><a href="security-javaee003.htm#GJTDP"><span class="secnum">46.3.2.5</span> To Run the converter-secure Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">47</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part X Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">48</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">49</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">50</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">51</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">52</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">53</span> Concurrency Utilities</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XI Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">54</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-javaee001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-javaee003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNBYL" name="BNBYL"></a><a id="JEETT00520" name="JEETT00520"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">46.2</span> <a id="sthref2541" name="sthref2541"></a><a id="sthref2542" name="sthref2542"></a><a id="sthref2543" name="sthref2543"></a>Securing Enterprise Beans</h1>
<p>Enterprise beans are Java EE components that implement EJB technology. Enterprise beans run in the EJB container, a runtime environment within the GlassFish Server. Although transparent to the application developer, the EJB container provides system-level services, such as transactions and security to its enterprise beans, which form the core of transactional Java EE applications.</p>
<p>Enterprise bean methods can be secured in either of the following ways:</p>
<ul>
<li>
<p><a id="sthref2544" name="sthref2544"></a><a id="sthref2545" name="sthref2545"></a><a id="sthref2546" name="sthref2546"></a><a id="sthref2547" name="sthref2547"></a><a id="sthref2548" name="sthref2548"></a><span class="bold">Declarative security</span> (preferred): Expresses an application component's security requirements using either deployment descriptors or annotations. The presence of an annotation in the business method of an enterprise bean class that specifies method permissions is all that is needed for method protection and authentication in some situations. This section discusses this simple and efficient method of securing enterprise beans.</p>
<p>Because of some limitations to the simplified method of securing enterprise beans, you would want to continue to use the deployment descriptor to specify security information in some instances. An authentication mechanism must be configured on the server for the simple solution to work. Basic authentication is the GlassFish Server's default authentication method.</p>
<p>This tutorial explains how to invoke user name/password authentication of authorized users by decorating the enterprise application's business methods with annotations that specify method permissions.</p>
<p>To make the deployer's task easier, the application developer can define security roles. A security role is a grouping of permissions that a given type of application users must have in order to successfully use the application. For example, in a payroll application, some users will want to view their own payroll information (employee), some will need to view others' payroll information (manager), and some will need to be able to change others' payroll information (payrollDept). The application developer would determine the potential users of the application and which methods would be accessible to which users. The application developer would then decorate classes or methods of the enterprise bean with annotations that specify the types of users authorized to access those methods. Using annotations to specify authorized users is described in <a href="#GJGCQ">Specifying Authorized Users by Declaring Security Roles</a>.</p>
<p>When one of the annotations is used to define method permissions, the deployment system will automatically require user name/password authentication. In this type of authentication, a user is prompted to enter a user name and password, which will be compared against a database of known users. If the user is found and the password matches, the roles that the user is assigned will be compared against the roles that are authorized to access the method. If the user is authenticated and found to have a role that is authorized to access that method, the data will be returned to the user.</p>
<p>Using declarative security is discussed in <a href="#GJGDI">Securing an Enterprise Bean Using Declarative Security</a>.</p>
</li>
<li>
<p><a id="sthref2549" name="sthref2549"></a><a id="sthref2550" name="sthref2550"></a><span class="bold">Programmatic security</span>: For an enterprise bean, code embedded in a business method that is used to access a caller's identity programmatically and that uses this information to make security decisions. Programmatic security is useful when declarative security alone is not sufficient to express the security model of an application.</p>
<p>In general, security management should be enforced by the container in a manner that is transparent to the enterprise beans' business methods. The programmatic security APIs described in this chapter should be used only in the less frequent situations in which the enterprise bean business methods need to access the security-context information, such as when you want to grant access based on the time of day or other nontrivial condition checks for a particular role.</p>
<p>Programmatic security is discussed in <a href="#GJGCS">Securing an Enterprise Bean Programmatically</a>.</p>
</li>
</ul>
<p>Some of the material in this chapter assumes that you have already read <a href="ejb-intro.htm#GIJSZ">Chapter 26, "Enterprise Beans"</a>, <a href="ejb-gettingstarted.htm#GIJRE">Chapter 27, "Getting Started with Enterprise Beans"</a>, and <a href="security-intro.htm#BNBWJ">Chapter 44, "Introduction to Security in the Java EE Platform"</a>.</p>
<p>As mentioned earlier, enterprise beans run in the EJB container, a runtime environment within the GlassFish Server, as shown in <a href="#BNBYM">Figure 46-1</a>.</p>
<div class="figure"><a id="BNBYM" name="BNBYM"></a><a id="JEETT00038" name="JEETT00038"></a>
<p class="titleinfigure">Figure 46-1 Java EE Server and Containers</p>
<img src="img/overview-servercontainers.gif" alt="Description of Figure 46-1 follows" title="Description of Figure 46-1 follows" longdesc="img_text/overview-servercontainers.htm" /><br />
<a id="sthref2551" name="sthref2551" href="img_text/overview-servercontainers.htm">Description of "Figure 46-1 Java EE Server and Containers"</a><br />
<br /></div>
<!-- class="figure" -->
<p>This section discusses securing a Java EE application where one or more modules, such as EJB JAR files, are packaged into an EAR file, the archive file that holds the application. Security annotations will be used in the Java programming class files to specify authorized users and basic, or user name/password, authentication.</p>
<p><a id="sthref2552" name="sthref2552"></a><a id="sthref2553" name="sthref2553"></a><a id="sthref2554" name="sthref2554"></a>Enterprise beans often provide the business logic of a web application. In these cases, packaging the enterprise bean within the web application's WAR module simplifies deployment and application organization. Enterprise beans may be packaged within a WAR module as Java class files or within a JAR file that is bundled within the WAR module. When a servlet or JavaServer Faces page handles the web front end and the application is packaged into a WAR module as a Java class file, security for the application can be handled in the application's <code>web.xml</code> file. The EJB in the WAR file can have its own deployment descriptor, <code>ejb-jar.xml</code>, if required. Securing web applications using <code>web.xml</code> is discussed in <a href="security-webtier.htm#BNCAS">Chapter 45, "Getting Started Securing Web Applications"</a>.</p>
<p>The following sections describe declarative and programmatic security mechanisms that can be used to protect enterprise bean resources. The protected resources include enterprise bean methods that are called from application clients, web components, or other enterprise beans.</p>
<p>For more information on this topic, read the Enterprise JavaBeans 3.1 specification. This document can be downloaded from <code><a href="http://jcp.org/en/jsr/detail?id=318">http://jcp.org/en/jsr/detail?id=318</a></code>. Chapter 17 of this specification, "Security Management," discusses security management for enterprise beans.</p>
<a id="GJGDI" name="GJGDI"></a><a id="JEETT01235" name="JEETT01235"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.1</span> Securing an Enterprise Bean Using Declarative Security</h2>
<p>Declarative security enables the application developer to specify which users are authorized to access which methods of the enterprise beans and to authenticate these users with basic, or username-password, authentication. Frequently, the person who is developing an enterprise application is not the same person who is responsible for deploying the application. An application developer who uses declarative security to define method permissions and authentication mechanisms is passing along to the deployer a security view of the enterprise beans contained in the EJB JAR. When a security view is passed on to the deployer, he or she uses this information to define method permissions for security roles. If you don't define a security view, the deployer will have to determine what each business method does to determine which users are authorized to call each method.</p>
<p><a id="sthref2555" name="sthref2555"></a><a id="sthref2556" name="sthref2556"></a><a id="sthref2557" name="sthref2557"></a><a id="sthref2558" name="sthref2558"></a><a id="sthref2559" name="sthref2559"></a>A security view consists of a set of security roles, a semantic grouping of permissions that a given type of users of an application must have to successfully access the application. Security roles are meant to be logical roles, representing a type of user. You can define method permissions for each security role. A method permission is a permission to invoke a specified group of methods of an enterprise bean's business interface, home interface, component interface, and/or web service endpoints. After method permissions are defined, user name/password authentication will be used to verify the identity of the user.</p>
<p>It is important to keep in mind that security roles are used to define the logical security view of an application. They should not be confused with the user groups, users, principals, and other concepts that exist in the GlassFish Server. An additional step is required to map the roles defined in the application to users, groups, and principals that are the components of the user database in the file realm of the GlassFish Server. These steps are outlined in <a href="security-intro005.htm#BNBXV">Mapping Roles to Users and Groups</a>.</p>
<p>The following sections show how an application developer uses declarative security to either secure an application or to create a security view to pass along to the deployer.</p>
<a id="GJGCQ" name="GJGCQ"></a><a id="JEETT00783" name="JEETT00783"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.1.1</span> <a id="sthref2560" name="sthref2560"></a><a id="sthref2561" name="sthref2561"></a><a id="sthref2562" name="sthref2562"></a><a id="sthref2563" name="sthref2563"></a><a id="sthref2564" name="sthref2564"></a><a id="sthref2565" name="sthref2565"></a><a id="sthref2566" name="sthref2566"></a>Specifying Authorized Users by Declaring Security Roles</h3>
<p>This section discusses how to use annotations to specify the method permissions for the methods of a bean class. For more information on these annotations, refer to the Common Annotations for the Java Platform specification at <code><a href="http://jcp.org/en/jsr/detail?id=250">http://jcp.org/en/jsr/detail?id=250</a></code>.</p>
<p>Method permissions can be specified on the class, the business methods of the class, or both. Method permissions can be specified on a method of the bean class to override the method permissions value specified on the entire bean class. The following annotations are used to specify method permissions:</p>
<ul>
<li>
<p><a id="sthref2567" name="sthref2567"></a><code>@DeclareRoles</code>: Specifies all the roles that the application will use, including roles not specifically named in a <code>@RolesAllowed</code> annotation. The set of security roles the application uses is the total of the security roles defined in the <code>@DeclareRoles</code> and <code>@RolesAllowed</code> annotations.</p>
<p>The <code>@DeclareRoles</code> annotation is specified on a bean class, where it serves to declare roles that can be tested (for example, by calling <code>isCallerInRole</code>) from within the methods of the annotated class. When declaring the name of a role used as a parameter to the <code>isCallerInRole(String roleName)</code> method, the declared name must be the same as the parameter value.</p>
<p>The following example code demonstrates the use of the <code>@DeclareRoles</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@DeclareRoles("BusinessAdmin")
public class Calculator {
    ...
}
</pre>
<p>The syntax for declaring more than one role is as shown in the following example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@DeclareRoles({"Administrator", "Manager", "Employee"})
</pre></li>
<li>
<p><a id="sthref2568" name="sthref2568"></a><code>@RolesAllowed("</code><span class="variable">list-of-roles</span><code>")</code>: Specifies the security roles permitted to access methods in an application. This annotation can be specified on a class or on one or more methods. When specified at the class level, the annotation applies to all methods in the class. When specified on a method, the annotation applies to that method only and overrides any values specified at the class level.</p>
<p>To specify that no roles are authorized to access methods in an application, use the <code>@DenyAll</code> annotation. To specify that a user in any role is authorized to access the application, use the <code>@PermitAll</code> annotation.</p>
<p>When used in conjunction with the <code>@DeclareRoles</code> annotation, the combined set of security roles is used by the application.</p>
<p>The following example code demonstrates the use of the <code>@RolesAllowed</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@DeclareRoles({"Administrator", "Manager", "Employee"})
public class Calculator {

    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        ...
    }
}
</pre></li>
<li>
<p><a id="sthref2569" name="sthref2569"></a><code>@PermitAll</code>: Specifies that <span class="italic">all</span> security roles are permitted to execute the specified method or methods. The user is not checked against a database to ensure that he or she is authorized to access this application.</p>
<p>This annotation can be specified on a class or on one or more methods. Specifying this annotation on the class means that it applies to all methods of the class. Specifying it at the method level means that it applies to only that method.</p>
<p>The following example code demonstrates the use of the <code>@PermitAll</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
import javax.annotation.security.*;
@RolesAllowed("RestrictedUsers")
public class Calculator {

    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        //...
    }
    @PermitAll
    public long convertCurrency(long amount) {
        //...
    }
}
</pre></li>
<li>
<p><a id="sthref2570" name="sthref2570"></a><code>@DenyAll</code>: Specifies that <span class="italic">no</span> security roles are permitted to execute the specified method or methods. This means that these methods are excluded from execution in the Java EE container.</p>
<p>The following example code demonstrates the use of the <code>@DenyAll</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
import javax.annotation.security.*;
@RolesAllowed("Users")
public class Calculator {
    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        //...
    }
    @DenyAll
    public long convertCurrency(long amount) {
        //...
    }
}
</pre></li>
</ul>
<p>The following code snippet demonstrates the use of the <code>@DeclareRoles</code> annotation with the <code>isCallerInRole</code> method. In this example, the <code>@DeclareRoles</code> annotation declares a role that the enterprise bean <code>PayrollBean</code> uses to make the security check by using <code>isCallerInRole("payroll")</code> to verify that the caller is authorized to change salary data:</p>
<pre xml:space="preserve" class="oac_no_warn">
@DeclareRoles("payroll")
@Stateless public class PayrollBean implements Payroll {
    @Resource SessionContext ctx;

    public void updateEmployeeInfo(EmplInfo info) {

        oldInfo = ... read from database;

        // The salary field can be changed only by callers
        // who have the security role "payroll"
        Principal callerPrincipal = ctx.getCallerPrincipal();
        if (info.salary != oldInfo.salary &amp;&amp; !ctx.isCallerInRole("payroll")) {
            throw new SecurityException(...);
        }
        ...
    }
    ...
}
</pre>
<p>The following example code illustrates the use of the <code>@RolesAllowed</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@RolesAllowed("admin")
public class SomeClass {
    public void aMethod () {...}
    public void bMethod () {...}
    ...
}

@Stateless public class MyBean extends SomeClass implements A  {

    @RolesAllowed("HR")
    public void aMethod () {...}

    public void cMethod () {...}
    ...
}
</pre>
<p>In this example, assuming that <code>aMethod</code>, <code>bMethod</code>, and <code>cMethod</code> are methods of business interface <code>A</code>, the method permissions values of methods <code>aMethod</code> and <code>bMethod</code> are <code>@RolesAllowed("HR")</code> and <code>@RolesAllowed("admin")</code>, respectively. The method permissions for method <code>cMethod</code> have not been specified.</p>
<p>To clarify, the annotations are not inherited by the subclass itself. Instead, the annotations apply to methods of the superclass that are inherited by the subclass.</p>
</div>
<!-- class="sect3" -->
<a id="BNBYU" name="BNBYU"></a><a id="JEETT00784" name="JEETT00784"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.1.2</span> <a id="sthref2571" name="sthref2571"></a><a id="sthref2572" name="sthref2572"></a>Specifying an Authentication Mechanism and Secure Connection</h3>
<p>When method permissions are specified, basic user name/password authentication will be invoked by the GlassFish Server.</p>
<p>To use a different type of authentication or to require a secure connection using SSL, specify this information in an application deployment descriptor.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GJGCS" name="GJGCS"></a><a id="JEETT01236" name="JEETT01236"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.2</span> Securing an Enterprise Bean Programmatically</h2>
<p>Programmatic security, code that is embedded in a business method, is used to access a caller's identity programmatically and uses this information to make security decisions within the method itself.</p>
<a id="GJGCR" name="GJGCR"></a><a id="JEETT00785" name="JEETT00785"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.2.1</span> <a id="sthref2573" name="sthref2573"></a><a id="sthref2574" name="sthref2574"></a><a id="sthref2575" name="sthref2575"></a><a id="sthref2576" name="sthref2576"></a><a id="sthref2577" name="sthref2577"></a><a id="sthref2578" name="sthref2578"></a>Accessing an Enterprise Bean Caller's Security Context</h3>
<p>In general, security management should be enforced by the container in a manner that is transparent to the enterprise bean's business methods. The security API described in this section should be used only in the less frequent situations in which the enterprise bean business methods need to access the security context information, such as when you want to restrict access to a particular time of day.</p>
<p>The <code>javax.ejb.EJBContext</code> interface provides two methods that allow the bean provider to access security information about the enterprise bean's caller:</p>
<ul>
<li>
<p><code>getCallerPrincipal</code>, which allows the enterprise bean methods to obtain the current caller principal's name. The methods might, for example, use the name as a key to information in a database.</p>
<p>The following code sample illustrates the use of the <code>getCallerPrincipal</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless public class EmployeeServiceBean implements EmployeeService {
    @Resource SessionContext ctx;
    @PersistenceContext EntityManager em;

    public void changePhoneNumber(...) {
        ...
        // obtain the caller principal.
        callerPrincipal = ctx.getCallerPrincipal();

        // obtain the caller principal's name.
        callerKey = callerPrincipal.getName();

        // use callerKey as primary key to find EmployeeRecord
        EmployeeRecord myEmployeeRecord =
            em.find(EmployeeRecord.class, callerKey);

        // update phone number
        myEmployeeRecord.setPhoneNumber(...);

        ...
    }
}
</pre>
<p>In this example, the enterprise bean obtains the principal name of the current caller and uses it as the primary key to locate an <code>EmployeeRecord</code> entity. This example assumes that application has been deployed such that the current caller principal contains the primary key used for the identification of employees (for example, employee number).</p>
</li>
<li>
<p><code>isCallerInRole</code>, which the enterprise bean code can use to allow the bean provider/application developer to code the security checks that cannot be easily defined using method permissions. Such a check might impose a role-based limit on a request, or it might depend on information stored in the database.</p>
<p>The enterprise bean code can use the <code>isCallerInRole</code> method to test whether the current caller has been assigned to a given security role. Security roles are defined by the bean provider or the application and are assigned by the deployer to principals or principal groups that exist in the operational environment.</p>
<p>The following code sample illustrates the use of the <code>isCallerInRole</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless public class PayrollBean implements Payroll {
     @Resource SessionContext ctx;

     public void updateEmployeeInfo(EmplInfo info) {

         oldInfo = ... read from database;

         // The salary field can be changed only by callers
         // who have the security role "payroll"
         if (info.salary != oldInfo.salary &amp;&amp;
             !ctx.isCallerInRole("payroll")) {
                 throw new SecurityException(...);
         }
         ...
     }
     ...
 }
</pre></li>
</ul>
<p>You would use programmatic security in this way to dynamically control access to a method, for example, when you want to deny access except during a particular time of day. An example application that uses the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods is described in <a href="security-javaee003.htm#BNCAA">The converter-secure Example: Securing an Enterprise Bean with Programmatic Security</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNBYR" name="BNBYR"></a><a id="JEETT01237" name="JEETT01237"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.3</span> <a id="sthref2579" name="sthref2579"></a><a id="sthref2580" name="sthref2580"></a><a id="sthref2581" name="sthref2581"></a><a id="sthref2582" name="sthref2582"></a><a id="sthref2583" name="sthref2583"></a>Propagating a Security Identity (Run-As)</h2>
<p>You can specify whether a caller's security identity should be used for the execution of specified methods of an enterprise bean or whether a specific run-as identity should be used. <a href="#BNBZA">Figure 46-2</a> illustrates this concept.</p>
<div class="figure"><a id="BNBZA" name="BNBZA"></a><a id="JEETT00039" name="JEETT00039"></a>
<p class="titleinfigure">Figure 46-2 Security Identity Propagation</p>
<img src="img/security-idpropag.gif" alt="Description of Figure 46-2 follows" title="Description of Figure 46-2 follows" longdesc="img_text/security-idpropag.htm" /><br />
<a id="sthref2584" name="sthref2584" href="img_text/security-idpropag.htm">Description of "Figure 46-2 Security Identity Propagation"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In this illustration, an application client is making a call to an enterprise bean method in one EJB container. This enterprise bean method, in turn, makes a call to an enterprise bean method in another container. The security identity during the first call is the identity of the caller. The security identity during the second call can be any of the following options.</p>
<ul>
<li>
<p>By default, the identity of the caller of the intermediate component is propagated to the target enterprise bean. This technique is used when the target container trusts the intermediate container.</p>
</li>
<li>
<p><a id="sthref2585" name="sthref2585"></a>A <span class="italic">specific</span> identity is propagated to the target enterprise bean. This technique is used when the target container expects access using a specific identity.</p>
<p>To propagate an identity to the target enterprise bean, configure a run-as identity for the bean, as described in <a href="#BNBZB">Configuring a Component's Propagated Security Identity</a>. Establishing a run-as identity for an enterprise bean does not affect the identities of its callers, which are the identities tested for permission to access the methods of the enterprise bean. The run-as identity establishes the identity that the enterprise bean will use when it makes calls.</p>
<p>The run-as identity applies to the enterprise bean as a whole, including all the methods of the enterprise bean's business interface, local and remote interfaces, component interface, and web service endpoint interfaces, the message listener methods of a message-driven bean, the timeout method of an enterprise bean, and all internal methods of the bean that might be called in turn.</p>
</li>
</ul>
<a id="BNBZB" name="BNBZB"></a><a id="JEETT00786" name="JEETT00786"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.3.1</span> Configuring a Component's Propagated Security Identity</h3>
<p>You can configure an enterprise bean's run-as, or propagated, security identity by using the <code>@RunAs</code> annotation, which defines the role of the application during execution in a Java EE container. The annotation can be specified on a class, allowing developers to execute an application under a particular role. The role must map to the user/group information in the container's security realm. The <code>@RunAs</code> annotation specifies the name of a security role as its parameter.</p>
<p>Here is some example code that demonstrates the use of the <code>@RunAs</code> annotation.</p>
<pre xml:space="preserve" class="oac_no_warn">
@RunAs("Admin")
public class Calculator {
    //....
}
</pre>
<p>You will have to map the run-as role name to a given principal defined on the GlassFish Server if the given roles are associated with more than one user principal.</p>
</div>
<!-- class="sect3" -->
<a id="BNBZC" name="BNBZC"></a><a id="JEETT00787" name="JEETT00787"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.3.2</span> <a id="sthref2586" name="sthref2586"></a><a id="sthref2587" name="sthref2587"></a>Trust between Containers</h3>
<p>When an enterprise bean is designed so that either the original caller identity or a designated identity is used to call a target bean, the target bean will receive the propagated identity only. The target bean will not receive any authentication data.</p>
<p>There is no way for the target container to authenticate the propagated security identity. However, because the security identity is used in authorization checks (for example, method permissions or with the <code>isCallerInRole</code> method), it is vitally important that the security identity be authentic. Because no authentication data is available to authenticate the propagated identity, the target must trust that the calling container has propagated an authenticated security identity.</p>
<p>By default, the GlassFish Server is configured to trust identities that are propagated from different containers. Therefore, you do not need to take any special steps to set up a trust relationship.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNBZG" name="BNBZG"></a><a id="JEETT01238" name="JEETT01238"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.4</span> <a id="sthref2588" name="sthref2588"></a>Deploying Secure Enterprise Beans</h2>
<p>The deployer is responsible for ensuring that an assembled application is secure after it has been deployed in the target operational environment. If a security view has been provided to the deployer through the use of security annotations and/or a deployment descriptor, the security view is mapped to the mechanisms and policies used by the security domain in the target operational environment, which in this case is the GlassFish Server. If no security view is provided, the deployer must set up the appropriate security policy for the enterprise bean application.</p>
<p>Deployment information is specific to a web or application server.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-javaee001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-javaee003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2012, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

